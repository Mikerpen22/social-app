{"ast":null,"code":"var _jsxFileName = \"/Users/mikey/social-app/src/pages/home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./home.css\";\nimport Feed from '../../components/feed/Feed';\nimport Rightbar from '../../components/rightbar/Rightbar';\nimport Sidebar from '../../components/sidebar/Sidebar';\nimport Topbar from '../../components/topbar/Topbar';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = props => {\n  _s();\n\n  const tempArrForInitialState = new Array(20);\n  const [friendsArr, setFriends] = useState(tempArrForInitialState); // Fetch users from dummy server\n\n  useEffect(() => {\n    const getFriends = async () => {\n      let serverFriends = await fetchFriends();\n\n      if (localStorage.getItem(\"friends\")) {\n        console.log(localStorage);\n        let updatedFriends = localStorage.getItem(\"friends\").split(',');\n        updatedFriends = updatedFriends.map(n => parseInt(n));\n        console.log(updatedFriends);\n        serverFriends = serverFriends.filter(f => updatedFriends.includes(f.id));\n      }\n\n      localStorage.setItem(\"allFriends\", serverFriends);\n      setFriends(serverFriends);\n      let friendsIdList = serverFriends.map(f => f.id);\n      console.log(friendsIdList);\n      localStorage.setItem(\"friends\", friendsIdList);\n      console.log(localStorage);\n    };\n\n    getFriends();\n  }, []);\n\n  const fetchFriends = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteFriendFromList = e => {\n    let temp = friendsArr.filter(friend => friend.id != e.currentTarget.name);\n    console.log(`I'm at Home.js deleting friend ${e.currentTarget.name}!`); // Update friends at localStorage\n\n    let temp2 = friendsArr.map(friend => friend.id);\n    temp2 = temp2.filter(f => f != e.currentTarget.name);\n    localStorage.setItem(\"friends\", temp2);\n    setFriends(temp);\n    console.log(friendsArr);\n  };\n\n  const addFriendToList = f => {\n    let newFriend = {\n      id: Math.random() * 1000 + 1,\n      name: f,\n      username: f\n    };\n    let tempFriendList = [...friendsArr, newFriend];\n    console.log(tempFriendList);\n    setFriends(tempFriendList);\n  };\n\n  const restoreFriends = idArr => {\n    let idObjArr = idArr.map(id => ({\n      id: id,\n      name: \"\",\n      username: \"\",\n      email: \"\",\n      address: {},\n      phone: \"\",\n      website: \"\",\n      company: {}\n    }));\n    console.log(idObjArr);\n    setFriends(idObjArr); // This line is not working!!\n\n    console.log(friendsArr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {\n      currUser: props.currUser,\n      updateCurrUser: props.updateCurrUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homeContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        currUser: props.currUser,\n        friends: friendsArr,\n        deleteFriendFromList: deleteFriendFromList,\n        addFriendToList: addFriendToList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Feed, {\n        currUser: props.currUser,\n        friends: friendsArr,\n        restoreFriends: restoreFriends\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Rightbar, {\n        currUser: props.currUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"Li3fY3RFxIYu1qRqQkTIFLLvQJQ=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/mikey/social-app/src/pages/home/Home.js"],"names":["React","Feed","Rightbar","Sidebar","Topbar","useEffect","useState","Home","props","tempArrForInitialState","Array","friendsArr","setFriends","getFriends","serverFriends","fetchFriends","localStorage","getItem","console","log","updatedFriends","split","map","n","parseInt","filter","f","includes","id","setItem","friendsIdList","res","fetch","data","json","deleteFriendFromList","e","temp","friend","currentTarget","name","temp2","addFriendToList","newFriend","Math","random","username","tempFriendList","restoreFriends","idArr","idObjArr","email","address","phone","website","company","currUser","updateCurrUser"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AAEpB,QAAMC,sBAAsB,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAA/B;AACA,QAAM,CAACC,UAAD,EAAaC,UAAb,IAA2BN,QAAQ,CAACG,sBAAD,CAAzC,CAHoB,CAIpB;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,UAAU,GAAG,YAAY;AAC3B,UAAIC,aAAa,GAAG,MAAMC,YAAY,EAAtC;;AACA,UAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAH,EAAmC;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,YAAII,cAAc,GAAGJ,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCI,KAAhC,CAAsC,GAAtC,CAArB;AACAD,QAAAA,cAAc,GAAGA,cAAc,CAACE,GAAf,CAAoBC,CAAD,IAAMC,QAAQ,CAACD,CAAD,CAAjC,CAAjB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AACAN,QAAAA,aAAa,GAAGA,aAAa,CAACW,MAAd,CAAqBC,CAAC,IAAIN,cAAc,CAACO,QAAf,CAAwBD,CAAC,CAACE,EAA1B,CAA1B,CAAhB;AACH;;AAEDZ,MAAAA,YAAY,CAACa,OAAb,CAAqB,YAArB,EAAmCf,aAAnC;AACAF,MAAAA,UAAU,CAACE,aAAD,CAAV;AACA,UAAIgB,aAAa,GAAGhB,aAAa,CAACQ,GAAd,CAAmBI,CAAD,IAAMA,CAAC,CAACE,EAA1B,CAApB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYW,aAAZ;AACAd,MAAAA,YAAY,CAACa,OAAb,CAAqB,SAArB,EAAgCC,aAAhC;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACH,KAhBD;;AAiBAH,IAAAA,UAAU;AACb,GAnBQ,EAmBN,EAnBM,CAAT;;AAoBA,QAAME,YAAY,GAAG,YAAW;AAC5B,UAAMgB,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACH,GAJD;;AAMA,QAAME,oBAAoB,GAAIC,CAAD,IAAO;AAChC,QAAIC,IAAI,GAAG1B,UAAU,CAACc,MAAX,CAAoBa,MAAD,IAAYA,MAAM,CAACV,EAAP,IAAaQ,CAAC,CAACG,aAAF,CAAgBC,IAA5D,CAAX;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCiB,CAAC,CAACG,aAAF,CAAgBC,IAAK,GAAnE,EAFgC,CAIhC;;AACA,QAAIC,KAAK,GAAG9B,UAAU,CAACW,GAAX,CAAgBgB,MAAD,IAAWA,MAAM,CAACV,EAAjC,CAAZ;AACAa,IAAAA,KAAK,GAAGA,KAAK,CAAChB,MAAN,CAAcC,CAAD,IAAOA,CAAC,IAAIU,CAAC,CAACG,aAAF,CAAgBC,IAAzC,CAAR;AACAxB,IAAAA,YAAY,CAACa,OAAb,CAAqB,SAArB,EAAgCY,KAAhC;AACA7B,IAAAA,UAAU,CAACyB,IAAD,CAAV;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AACH,GAVD;;AAYA,QAAM+B,eAAe,GAAIhB,CAAD,IAAO;AAC3B,QAAIiB,SAAS,GAAG;AAACf,MAAAA,EAAE,EAAEgB,IAAI,CAACC,MAAL,KAAc,IAAd,GAAmB,CAAxB;AAA2BL,MAAAA,IAAI,EAAEd,CAAjC;AAAoCoB,MAAAA,QAAQ,EAAEpB;AAA9C,KAAhB;AACA,QAAIqB,cAAc,GAAG,CAAC,GAAGpC,UAAJ,EAAgBgC,SAAhB,CAArB;AACAzB,IAAAA,OAAO,CAACC,GAAR,CAAY4B,cAAZ;AACAnC,IAAAA,UAAU,CAACmC,cAAD,CAAV;AACH,GALD;;AAOA,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAIC,QAAQ,GAAGD,KAAK,CAAC3B,GAAN,CAAWM,EAAD,KAAS;AAACA,MAAAA,EAAE,EAAEA,EAAL;AAASY,MAAAA,IAAI,EAAE,EAAf;AAAmBM,MAAAA,QAAQ,EAAE,EAA7B;AAAiCK,MAAAA,KAAK,EAAC,EAAvC;AAA2CC,MAAAA,OAAO,EAAE,EAApD;AAAwDC,MAAAA,KAAK,EAAC,EAA9D;AAAkEC,MAAAA,OAAO,EAAC,EAA1E;AAA8EC,MAAAA,OAAO,EAAC;AAAtF,KAAT,CAAV,CAAf;AACArC,IAAAA,OAAO,CAACC,GAAR,CAAY+B,QAAZ;AACAtC,IAAAA,UAAU,CAACsC,QAAD,CAAV,CAH8B,CAGN;;AACxBhC,IAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AACH,GALD;;AAOA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEH,KAAK,CAACgD,QAAxB;AAAkC,MAAA,cAAc,EAAEhD,KAAK,CAACiD;AAAxD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAEjD,KAAK,CAACgD,QAAzB;AAAmC,QAAA,OAAO,EAAE7C,UAA5C;AAAwD,QAAA,oBAAoB,EAAEwB,oBAA9E;AAAoG,QAAA,eAAe,EAAEO;AAArH;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAElC,KAAK,CAACgD,QAAtB;AAAgC,QAAA,OAAO,EAAE7C,UAAzC;AAAqD,QAAA,cAAc,EAAEqC;AAArE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAExC,KAAK,CAACgD;AAA1B;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAUH,CAnED;;GAAMjD,I;;KAAAA,I;AAoEN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport \"./home.css\"\nimport Feed from '../../components/feed/Feed'\nimport Rightbar from '../../components/rightbar/Rightbar'\nimport Sidebar from '../../components/sidebar/Sidebar'\nimport Topbar from '../../components/topbar/Topbar'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\n\nconst Home = (props) => {\n\n    const tempArrForInitialState = new Array(20)\n    const [friendsArr, setFriends] = useState(tempArrForInitialState)\n    // Fetch users from dummy server\n    useEffect(() => {\n        const getFriends = async () => {\n            let serverFriends = await fetchFriends()\n            if(localStorage.getItem(\"friends\")){\n                console.log(localStorage)\n                let updatedFriends = localStorage.getItem(\"friends\").split(',')\n                updatedFriends = updatedFriends.map((n)=>(parseInt(n)))\n                console.log(updatedFriends)\n                serverFriends = serverFriends.filter(f => updatedFriends.includes(f.id))\n            }\n            \n            localStorage.setItem(\"allFriends\", serverFriends)\n            setFriends(serverFriends)\n            let friendsIdList = serverFriends.map((f)=>(f.id))\n            console.log(friendsIdList)\n            localStorage.setItem(\"friends\", friendsIdList)\n            console.log(localStorage)\n        }\n        getFriends()\n    }, [])\n    const fetchFriends = async() => {\n        const res = await fetch(\"https://jsonplaceholder.typicode.com/users\")\n        const data = await res.json()\n        return data\n    }\n\n    const deleteFriendFromList = (e) => {\n        let temp = friendsArr.filter( (friend) => friend.id != e.currentTarget.name)\n        console.log(`I'm at Home.js deleting friend ${e.currentTarget.name}!`)\n        \n        // Update friends at localStorage\n        let temp2 = friendsArr.map((friend)=>(friend.id))\n        temp2 = temp2.filter((f) => f != e.currentTarget.name)\n        localStorage.setItem(\"friends\", temp2)\n        setFriends(temp)\n        console.log(friendsArr)\n    }\n\n    const addFriendToList = (f) => {\n        let newFriend = {id: Math.random()*1000+1, name: f, username: f}\n        let tempFriendList = [...friendsArr, newFriend]\n        console.log(tempFriendList)\n        setFriends(tempFriendList)\n    }\n\n    const restoreFriends = (idArr) => {\n        let idObjArr = idArr.map((id) => ({id: id, name: \"\", username: \"\", email:\"\", address: {}, phone:\"\", website:\"\", company:{}}))\n        console.log(idObjArr)\n        setFriends(idObjArr)    // This line is not working!!\n        console.log(friendsArr)\n    }\n\n    return (\n        <>\n            <Topbar currUser={props.currUser} updateCurrUser={props.updateCurrUser}/>\n            <div className=\"homeContainer\">\n                <Sidebar currUser={props.currUser} friends={friendsArr} deleteFriendFromList={deleteFriendFromList} addFriendToList={addFriendToList}/>\n                <Feed currUser={props.currUser} friends={friendsArr} restoreFriends={restoreFriends}/>\n                <Rightbar currUser={props.currUser}/>\n            </div>\n        </>\n    )\n}\nexport default Home\n"]},"metadata":{},"sourceType":"module"}